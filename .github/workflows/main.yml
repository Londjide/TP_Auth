name: Java CI/CD Pipeline (Windows)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
        
    - name: Create directories
      run: |
        mkdir build
        mkdir build\main
      shell: cmd
        
    - name: Compile project
      run: |
        echo "Compilation du projet..."
        javac -d build -cp "lib\*;." src\main\*.java
      shell: cmd
        
    - name: Create JAR
      run: |
        echo "Création du JAR..."
        echo Main-Class: main.Connexion > build\MANIFEST.MF
        jar cvfm TP_Authentification.jar build\MANIFEST.MF -C build .
      shell: cmd
  
  test:
    needs: build
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    
    - name: Recreate build directory
      run: |
        mkdir build
        mkdir build\main
        javac -d build -cp "lib\*;." src\main\*.java
      shell: cmd
    
    - name: Run unit tests
      run: |
        echo "Exécution des tests unitaires..."
        java -cp "build;lib\*;." org.junit.runner.JUnitCore main.LoginTest
      shell: cmd
    
    - name: Test summary
      run: |
        echo "=== RÉSUMÉ DES TESTS ==="
        echo "Tests exécutés : LoginTest"
        echo "Note: Dans un environnement réel, nous utiliserions un framework comme JUnit ou TestNG avec des rapports détaillés."
      shell: cmd

  code-analysis:
    needs: test
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Static code analysis
      run: |
        echo "=== ANALYSE STATIQUE DU CODE ==="
        
        echo "--- STATISTIQUES DU PROJET ---"
        echo "Nombre de fichiers Java:"
        dir /B /S src\*.java | find /c ":"
        
        echo "Contenu des fichiers Java:"
        dir /B /S src\*.java
        
        echo "--- DÉTECTION DE PATTERNS PROBLÉMATIQUES ---"
        echo "Appels à System.out.println (à éviter en production):"
        findstr /S /M "System.out.println" src\*.java | find /c ":"
        
        echo "Captures d'exceptions génériques (à éviter):"
        findstr /S /M "catch (Exception" src\*.java | find /c ":"
        
        echo "Appels à printStackTrace() (à remplacer par un logger):"
        findstr /S /M "printStackTrace()" src\*.java | find /c ":"
        
        echo "--- ANALYSE DE LA DOCUMENTATION ---"
        echo "Méthodes et classes avec JavaDoc:"
        findstr /S /M "/**" src\*.java | find /c ":"
      shell: cmd
    
    - name: Security check
      run: |
        echo "=== VÉRIFICATION DE SÉCURITÉ BASIQUE ==="
        
        echo "Recherche de vulnérabilités potentielles..."
        echo "Utilisation de chaînes de connexion en dur:"
        findstr /S /M "jdbc:sqlite" src\*.java | find /c ":"
        
        echo "Mots de passe en clair:"
        findstr /S /M "password.*=\"" src\*.java | find /c ":"
        
        echo "Note: Dans un environnement réel, nous utiliserions des outils comme SonarQube, PMD, FindBugs ou SpotBugs."
      shell: cmd

  generate-documentation:
    needs: code-analysis
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    
    - name: Generate JavaDoc
      run: |
        echo "=== GÉNÉRATION DE LA DOCUMENTATION ==="
        mkdir docs
        javadoc -d docs -sourcepath src -subpackages main
        echo "Documentation générée dans le dossier docs/"
      shell: cmd
    
    - name: Documentation summary
      run: |
        echo "Documentation générée pour les classes:"
        dir /B /S src\*.java | findstr /R "\.java$" 
      shell: cmd

  deployment-simulation:
    needs: [test, code-analysis, generate-documentation]
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Set up JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    
    - name: Recreate JAR
      run: |
        mkdir build
        javac -d build -cp "lib\*;." src\main\*.java
        echo Main-Class: main.Connexion > build\MANIFEST.MF
        jar cvfm TP_Authentification.jar build\MANIFEST.MF -C build .
      shell: cmd
    
    - name: Simulate deployment
      run: |
        echo "=== SIMULATION DE DÉPLOIEMENT ==="
        echo "Préparation de l'environnement Windows..."
        echo "Copie du JAR vers le serveur Windows..."
        echo "Redémarrage du service Windows..."
        echo "Déploiement simulé avec succès!"
        
        echo "Note: Dans un environnement réel, nous déploierions sur un serveur Windows."
      shell: cmd
    
    - name: Create release notes
      run: |
        echo === NOTES DE RELEASE === > release_notes.txt
        echo Version: %date:~6,4%.%date:~3,2%.%date:~0,2% >> release_notes.txt
        echo Date: %date% >> release_notes.txt
        echo Commit: ${{ github.sha }} >> release_notes.txt
        echo. >> release_notes.txt
        echo Changements inclus dans cette version: >> release_notes.txt
        echo - Améliorations générales >> release_notes.txt
        echo - Corrections de bugs >> release_notes.txt
        echo - Nouvelles fonctionnalités >> release_notes.txt
        echo. >> release_notes.txt
        echo Notes de release générées automatiquement par le pipeline CI/CD Windows. >> release_notes.txt
        
        type release_notes.txt
      shell: cmd
